%\VignetteIndexEntry{Working with Two-Mode Networks in multiplex}
%\VignetteDepends{multiplex, Rgraphviz, multigraph}
%\VignetteEngine{knitr::knitr}

\documentclass{article}
\usepackage[a4paper,margin=2.5cm]{geometry}
\usepackage[fleqn]{amsmath}
\usepackage{float}
%
\setlength\parindent{0pt}
\setlength{\parskip}{9pt}
\renewcommand{\baselinestretch}{1.2}
%
\renewcommand\abstractname{}
%\lstset{breaklines=true}

\begin{document}

\title{\LARGE Working with Two-Mode Networks in `multiplex'}
\author{ {\Large Antonio Rivero Ostoic} \\
{\normalsize CESU, \large University of San Sim\'{o}n} }

\maketitle

Social networks are systems defined by a collection of relationships among collective actors. In terms of set theory, a relation is an ordered pair such as $(x, y)$ that refers to a directed linkage from an element $x$ to an element $y$, where $x \in X$ and $y \in Y$ called the domain and codomain of the relation. The context of a binary relation $R$ is the overall relation set that result from the Cartesian product of the domain and codomain or $X \times Y$ of all ordered pairs $(x, y)$ where $R$ is a subset of the context.

Normally a social network refers to a domain with a set of relations on such domain, which is the generic term used to name the social entities in the system, and in such case, the system of relations is said to be a one-mode network. However, when the domain and the codomain are not equal there are two sets of entities that describe the entire social system, which are known as affiliation, bipartite, or else two-mode networks. 


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
<<setup, include=FALSE>>=
knitr::opts_chunk$set(size = 'footnotesize', background = '#FFFFFF', prompt = TRUE, strip.white = FALSE, comment = NA)
options(width=110)
knitr::knit_hooks$set(small.mar = function(before, options, envir) {
    if (before) par(mar = c(4, 4, .1, .1))  # smaller margin on top and right
})
@
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


\section{Galois representation}
In terms of Formal Concept Analysis, the domain and codomain of a two-mode network are characterized respectively as a set of objects $G$, and a set of attributes $M$. A formal context is obtained with an incident relation $I \subseteq G \times M$ between these sets, and this triple is typically represented as a data table.
%\footnote{$G$ is for the German word \textit{Gegenst\"{a}nde} and $M$ for \textit{Merkmale}.}

<<data, echo=-6>>=
## Fruits data set with attributes
frt <- data.frame(yellow = c(0,1,0,0,1,0,0,0), green = c(0,0,1,0,0,0,0,1), red = c(1,0,0,1,0,0,0,0), 
                  orange = c(0,0,0,0,0,1,1,0), apple = c(1,1,1,1,0,0,0,0), citrus = c(0,0,0,0,1,1,1,1))
## Label the objects
rownames(frt) <- c("PinkLady","GrannySmith","GoldenDelicious","RedDelicious","Lemon","Orange","Mandarin","Lime")
frt
@

\newpage
%Certainly another way to obtain such data table of objects and attributes can be with the command \texttt{read.table()} and specifying the names of the rows. Alternatively the function \texttt{read.srt()} will accomplish almost the same by setting the \texttt{attr} argument to \texttt{TRUE} and the \texttt{toarray} argument to \texttt{FALSE}.
%
%<<readtable, eval=FALSE>>=
%read.table(file, header = TRUE, 
%  row.names=c("PinkLady","GrannySmith","GoldenDelicious","RedDelicious","Lemon","Orange","Mandarin","Lime"))
%@
%\vspace{-10pt}
%<<readsrt, eval=FALSE>>=
%read.srt(file, header = TRUE, attr = TRUE, toarray = FALSE)
%@
%The advantage of the \texttt{read.srt()} function is that the first column does not appear as a ``Factor'' but it is automatically taken as the names of the rows in the data table.


\subsection*{Galois derivations}
The formal concept of a formal context is a pair of sets of objects $A$ and attributes $B$ that is maximally contained on each other. A \emph{Galois derivation} between $G$ and $M$ is defined for any subsets $A \subseteq G$ and $B \subseteq M$ by
\begin{equation*}
\begin{aligned}
A^\prime \;=\; { m \in M \;\mid\; (g, m) \in I \quad(\text{for all } g \in A) } \\
B^\prime \;=\; { g \in G \;\mid\; (g, m) \in I \quad(\text{for all } m \in B) }
\end{aligned}
\end{equation*}
where $A$ and $B$ are said to be the extent and intent of the formal concept respectively, whereas $A^\prime$ is the set of attributes common to all the objects in the intent and $B^\prime$ the set of objects possessing the attributes in the extent.

Starting with version $1.5$ it is possible to perform an algebraic analysis of two-mode networks with the function \texttt{galois()} of \textbf{multiplex}.
This command produces an adjunction between the two sets partially ordered by inclusion, and we obtain the complete list of concepts of the context, which can be assigned into an object with the class named ``\texttt{Galois}'' and ``\texttt{full}''.

<<loadmultiplex>>=
## Load first the package
library("multiplex")
@
\vspace{-10pt}
<<galoisFull>>=
## Galois representation between objects and attributes
galois(frt)
@

It is also possible to condense the labeling of the objects and attributes with the option ``\texttt{reduced}'' in the argument \texttt{labeling} of the \texttt{galois()} function. 

<<galoisReduc, echo=-2>>=
gc <- galois(frt, labeling = "reduced")
galois(frt, labeling = "reduced")
@


However the full labeling is useful for the construction of the hierarchy of concepts, and it is kept in the structure of the output given by the Galois derivation.

<<strgaloisReduc, size='scriptsize'>>=
str(gc$full)
@


\subsection*{Partial ordering of the concepts}

A hierarchy of the concepts is given by the relation subconcept--superconcept 
$$
(A, B) \leq (A_2, B_2) \quad\Leftrightarrow\quad A_1 \subseteq A_2 \qquad (\Leftrightarrow\quad B_1 \subseteq B_2)
$$

For this, the function \texttt{partial.order()} now supports the ``\texttt{galois}'' option in the \texttt{type} argument where the hierarchy of the concepts is constructed. In this case, even though the concepts have the ``reduced'' option, it is the ``full'' labeling of the formal concepts that is the base of the ordering among these concepts that can be designated in different ways.

<<partialorder, echo=-3>>=
## Partial ordering of the formal concepts with established labels
pogcc <- partial.order(gc, type = "galois", lbs = paste("c", 1:length(gc$full), sep = ""))
pogcc
@

In the partial order table we can see that all concepts are included in concept $12$, whereas concept $7$ is included in the rest of the concepts, and hence these are the maxima and the minima of a complete lattice that includes all these concepts. From the outputs given with the Galois derivation of this context we can see as well that these concepts correspond to the set of objects and the set of attributes, which are completely abridged in the reduced formal context.


\subsection*{Concept lattice of the context}

The concept lattice of the formal context is a system of concepts partially ordered where the greatest lower bound of the meet and the least upper bound of the join are defined as
\begin{equation*}
\begin{aligned}
\bigwedge_{t\in T} \quad \bigl(A_t, B_t \bigr) \;=\; \Bigl(\; \bigcap_{t\in T}{A_t}, \;\;\bigl(\bigcup_{t\in T}{B_t} \bigr)^{\prime\prime} \;\Bigr) \\
\bigvee_{t\in T} \quad \bigl(A_t, B_t \bigr) \;=\; \Bigl(\; \bigl(\bigcup_{t\in T}{A_t} \bigr)^{\prime\prime}, \;\;\bigcap_{t\in T}{B_t} \;\Bigr) \\
\end{aligned}
\end{equation*}

We plot this type of lattice diagram with the labeling corresponding to the reduced context.
<<pogc>>= 
## First we assign the partial order of the reduced context to 'pogc'
pogc <- partial.order(gc, type = "galois")
@
\vspace{-10pt}
<<diagrampogc, fig.pos='H', fig.width=4.5, fig.height=4.5, fig.align='center', fig.cap='Concept Lattice of the fruits and their characteristics', echo=-1, small.mar=TRUE>>=  %
par(mar=c(0,0,0,0))
## Plot the lattice diagram
if( require("Rgraphviz", quietly = TRUE)) {
diagram(pogc)
}
@


Notice that the both objects and attributes not only are given just once (since this is a reduced representation of the context), but the labels are placed instead of the nodes rather than next to them as the typical representation of formal context. Moreover in case that a concept does not have a label, which happens in reduced contexts, then the number of the concept is placed rather than leave blank the node.


\section{Diagram levels \& Filters}

The construction of the concept lattice of the context allows us to have additional information about the network relational structure. One part is concerned with the inclusion levels in the lattice structure, and another aspect deals with downsets and upsets, which are formed from all the lower and greater bounds of an element in the lattice diagram. Next, we take a brief look at the suitable functions to get such information.

\subsection*{Levels in the lattice diagram}

Particularly when dealing with large diagrams, it can be difficult to distinguish the different heights in the lattice and the elements belonging to each level. Function \texttt{diagram.levels()} allows us to count with such information, and we illustrate this routine with the entry \texttt{pogcc} that represents the partial order of the concepts corresponding to the fruits data set.

<<diaglevels, echo=TRUE>>= 
## Diagram levels
if( require("Rgraphviz", quietly = TRUE)) {
diagram.levels(pogcc) }
@

Hence concepts $7$ and $12$ make a class of their own, whereas the rest of the concepts belong either to class $2$ or to class $3$.

\bigbreak

By setting \texttt{perm} to \texttt{TRUE}, we obtain the different classes in the lattice structure in a convenient way, and also a permuted partial order table according to the clustering.

<<diaglevelsperm, echo=TRUE, message=FALSE, warning=FALSE>>= 
## Diagram levels with permutation
if( require("Rgraphviz", quietly = TRUE)) {
diagram.levels(pogcc, perm = TRUE) }
@


\subsection*{Filters and Ideals}

Implications among objects and attributes in an arbitrary partially ordered set representing context are revealed by subsets in the order structure. 

\medbreak

Let $(P, \leq)$ be an ordered set, and $a$, $b$ are elements in $P$. 

A non-empty subset $U$ [resp. $D$] of $P$ is an upset [resp. downset] called a \emph{filter} [resp. \emph{ideal}] if, for all $a \in P$ and $b \in U$ [resp. $D$]
$$
b \leq a \text{\quad implies\quad} a \in U  \qquad\qquad [\;\text{resp.\;\;} a \leq b \text{\quad implies\quad} a \in D\;]
$$

For a particular element $x \in P$, the upset $\uparrow\! x$ formed for all the upper bounds of $x$ is called a \emph{principal filter} generated by $x$. Dually, $\downarrow\! x$ is a \emph{principal ideal} with all the lower bounds of $x$. Filters and ideals not coinciding with $P$ are called \emph{proper}.

\bigbreak

To illustrate these concepts, we apply the function \texttt{fltr()} of \textbf{multiplex} to the third element of the partial order represented by \texttt{pogc} that results in a proper principal filter for this formal concept with labels.

%<<princfltr, echo=TRUE>>= 
%## Principal filter of third concept
%fltr(3, pogcc)
%@
%
%In order to get the labels of the different concepts made of objects and attributes, we apply this function rather to object \texttt{pogc}, which embodies the partial order of the reduced context. 

<<princfltrlbs, echo=TRUE>>= 
## Principal filter of the third concept 
fltr(3, pogc)
@

We get the same result when introducing the one or more of the names of this concept.
<<princfltrlbs2, echo=TRUE, eval=FALSE>>= 
## Principal filter of the concept with these labels
fltr("PinkLady", pogc)
fltr(c("red", "RedDelicious"), pogc)
@

Or alternatively we can combine elements from different concepts to obtain other types of filters in the concept lattice of the context.
<<filter, echo=TRUE>>= 
## Filter of two concepts
fltr(c("Lemon", "Lime"), pogc)
@


%\newpage

Ideals and principal ideals are obtained in a similar way with this function provided that the argument \texttt{ideal} is set to \texttt{TRUE}.

<<ideal, echo=TRUE>>= 
## Ideal of two concepts
fltr(c(9, 11), pogc, ideal = TRUE)
@
%fltr(3, pogc, ideal = TRUE)



\section{Bipartite graphs}

Two-mode network are depicted through \emph{bipartite graphs}, where the entities in one set only can relate to the elements placed in the other set. \textbf{multiplex} has a reverse dependence on \textbf{multigraph} for the visualization of multiple networks, and also for bipartite graphs. Hence, we use the function \texttt{bmgraph()} to plot the graph of the \texttt{frt} data set with the default layout option.

<<bipp, echo=TRUE, eval=TRUE, fig.pos='H', fig.width=4, fig.height=4, fig.align='center', fig.env='figure', fig.cap='Bipartite graph'>>=
## Load the "multigraph" package
library("multigraph")

## Plot bipartite graph
bmgraph(frt, pch = 16:15)
@

Another possibility is to apply a force-directed layout to the binomial projection of this two-mode data set, below with some arguments for the vertices.

<<binp2, echo=TRUE, eval=FALSE>>= 
## Plot proyection of bipartite network
bmgraph(frt, layout = "stress", seed = 1, cex = 3, vcol = 8, pch = 16:15)
@
<<binp, fig.pos='H', fig.width=5, fig.height=5, fig.align='center', fig.env='figure', fig.cap='Bipartite graph with force-directed layout', echo=FALSE>>=
bmgraph(frt, layout = "force", seed = 1, cex = 3, vcol = 8, pch = 16:15)
@


\bigbreak
\medbreak

\renewcommand{\baselinestretch}{1.0}

\begin{thebibliography}{5}
%
\bibitem{Gant-Will96} Ganter, B. and R. Wille~\emph{ Formal Concept Analysis -- Mathematical Foundations}. Springer. 1996.
\bibitem{rgpahviz}  Hansen, K.D., J. Gentry, L. Long, R. Gentleman, S. Falcon, F. Hahne, and D. Sarkar   ~\textbf{Rgraphviz}: \emph{Provides plotting capabilities for R graph objects}. R package version 2.12.0
\bibitem{multiplex} Ostoic, J.A.R. ~\textbf{multiplex}: \emph{Algebraic Tools for the Analysis of Multiple Social Networks}. R package v 2.8
\bibitem{multiplex} Ostoic, J.A.R. ~\textbf{multigraph}: \emph{Plot and manipulate multigraphs}. R package v 0.60
%
\end{thebibliography}


\end{document}
